#version 460 core

layout(std140, binding = 0) uniform CameraMatrices
{
	mat4 view;
	mat4 proj;
	mat4 invView;
};
struct PointLight
{
	vec4 pos; //w is the radius
	vec4 col;//a is intensity
};
readonly layout(std430, binding = 0) buffer PointLights
{
	uint numPLights;
	PointLight pLights[];
};
uniform layout(binding = 0, r8ui) writeonly uimageBuffer outPointLightsList;
readonly layout(binding = 2) buffer spotLightSpheres
{
	uint numSLights;
	vec4 sLights[];
};
readonly layout(binding = 3) buffer spotLightVol
{
	bool sVolumetric[];
};
uniform layout(binding = 1, r8ui) writeonly uimageBuffer outSpotLightsList;
layout(location = 0)uniform uint maxListLights;
layout(location = 1)uniform uvec2 numPixels;
uniform layout(binding = 2, r8ui) writeonly uimageBuffer outVolPointLightsList;
uniform layout(binding = 3, r8ui) writeonly uimageBuffer outVolSpotLightsList;

//uniform layout(binding = 1, r32f) readonly image2D depthImage;
layout(binding = 0) uniform sampler2D gDepth;

shared uint pointsInTile;
shared uint spotsInTile;
shared uint volPointsInTile;
shared uint volSpotsInTile;
shared uint minZ;
shared uint maxZ;

float GetLinearZ(float inputDepth)
{
	return -proj[3][2] / (proj[2][2] + (inputDepth * 2.0 - 1.0));
}
vec3 GetViewPos(float inDepth, vec2 texCoords)
{
	float viewZ = GetLinearZ(inDepth);
	float viewX = (texCoords.x * 2.0 - 1.0) * (-viewZ) / proj[0][0];
	float viewY = (texCoords.y * 2.0 - 1.0) * (-viewZ) / proj[1][1];
	return vec3(viewX, viewY, viewZ);
}
vec4 GetFrustumPlane(in vec3 p, in vec3 p1)
{
	return vec4(normalize(cross(p,p1)), 0);
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
	//const uvec2 numTiles = (numPixels + gl_NumWorkGroups.xy -1) / gl_NumWorkGroups.xy;
	const uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	const uint tileIndex = uint(gl_WorkGroupID.y*gl_NumWorkGroups.x + gl_WorkGroupID.x);

	if(gl_LocalInvocationIndex == 0)
	{
		minZ = 0xFFFFFFFF;
        maxZ = 0;
		pointsInTile = 0;
		spotsInTile = 0;
		volPointsInTile = 0;
		volSpotsInTile = 0;
	}
	barrier();

	//uint pixelDepth = floatBitsToUint(imageLoad(depthImage, ivec2(gl_GlobalInvocationID.xy)).r);
	uint pixelDepth = floatBitsToUint(texture2D(gDepth, vec2(gl_GlobalInvocationID.xy) / vec2(numPixels)).r);
	atomicMin(minZ, pixelDepth);
	atomicMax(maxZ, pixelDepth);
	
	vec3 farPlanePoints[4];
	farPlanePoints[0] = GetViewPos(1.0, vec2(float(gl_WorkGroupID.x)/float(gl_NumWorkGroups.x),   float(gl_WorkGroupID.y)/float(gl_NumWorkGroups.y)));
	farPlanePoints[1] = GetViewPos(1.0, vec2(float(gl_WorkGroupID.x+1)/float(gl_NumWorkGroups.x), float(gl_WorkGroupID.y)/float(gl_NumWorkGroups.y)));
	farPlanePoints[2] = GetViewPos(1.0, vec2(float(gl_WorkGroupID.x+1)/float(gl_NumWorkGroups.x), float(gl_WorkGroupID.y+1)/float(gl_NumWorkGroups.y)));
	farPlanePoints[3] = GetViewPos(1.0, vec2(float(gl_WorkGroupID.x)/float(gl_NumWorkGroups.x),   float(gl_WorkGroupID.y+1)/float(gl_NumWorkGroups.y)));
	
	vec4 tileFrustumPlanes[4];
	for (uint i = 0; i<4; ++i)
	{
		tileFrustumPlanes[i] = GetFrustumPlane(farPlanePoints[i], farPlanePoints[(i+1)&3]);
	}

	barrier();
	float viewMinZ = GetLinearZ(uintBitsToFloat(minZ));
	float viewMaxZ = GetLinearZ(uintBitsToFloat(maxZ));

	//Point Lights
	for(uint i=gl_LocalInvocationIndex;i<numPLights; i+=threadCount)
	{
		PointLight light = pLights[i];
		vec3 viewPos = (view*vec4(light.pos.xyz,1.0)).xyz;
		if(dot(viewPos, tileFrustumPlanes[0].xyz) < light.pos.w &&
		dot(viewPos, tileFrustumPlanes[1].xyz) < light.pos.w &&
		dot(viewPos, tileFrustumPlanes[2].xyz) < light.pos.w &&
		dot(viewPos, tileFrustumPlanes[3].xyz) < light.pos.w &&
        (viewMaxZ - viewPos.z) < light.pos.w)
		{
			uint index;
			if(-viewPos.z > -light.pos.w)
			{
				index = atomicAdd(volPointsInTile, 1);
				if(index < maxListLights)
				{
					imageStore(outVolPointLightsList, int(tileIndex*maxListLights+index), uvec4(i));
				}
			}
			if((viewMinZ - viewPos.z) > (-light.pos.w))
			{
				index = atomicAdd(pointsInTile, 1);
				if(index < maxListLights)
				{
					imageStore(outPointLightsList, int(tileIndex*maxListLights+index), uvec4(i));
				}
			}
		}
	}

	//Spot Lights
	for(uint i=gl_LocalInvocationIndex;i<numSLights; i+=threadCount)
	{
		vec4 light = sLights[i];
		vec3 viewPos = (view*vec4(light.xyz,1.0)).xyz;
		if(dot(viewPos, tileFrustumPlanes[0].xyz) < light.w &&
		dot(viewPos, tileFrustumPlanes[1].xyz) < light.w &&
		dot(viewPos, tileFrustumPlanes[2].xyz) < light.w &&
		dot(viewPos, tileFrustumPlanes[3].xyz) < light.w &&
        (viewMaxZ - viewPos.z) < light.w)
		{
			uint index;
			if(sVolumetric[i] && (-viewPos.z > -light.w))
			{
				index = atomicAdd(volSpotsInTile, 1);
				if(index < maxListLights)
				{
					imageStore(outVolSpotLightsList, int(tileIndex*maxListLights+index), uvec4(i));
				}
			}
			if((viewMinZ - viewPos.z) > (-light.w))
			{
				index = atomicAdd(spotsInTile, 1);
				if(index < maxListLights)
				{
					imageStore(outSpotLightsList, int(tileIndex*maxListLights+index), uvec4(i));
				}
			}
		}
	}
	
	barrier();
	if(gl_LocalInvocationIndex == 0)
	{
		if(pointsInTile < maxListLights)
		{
			imageStore(outPointLightsList, int(tileIndex*maxListLights+pointsInTile), uvec4(255));
		}
		if(spotsInTile < maxListLights)
		{
			imageStore(outSpotLightsList, int(tileIndex*maxListLights+spotsInTile), uvec4(255));
		}
		if(volPointsInTile < maxListLights)
		{
			imageStore(outVolPointLightsList, int(tileIndex*maxListLights+volPointsInTile), uvec4(255));
		}
		if(volSpotsInTile < maxListLights)
		{
			imageStore(outVolSpotLightsList, int(tileIndex*maxListLights+volSpotsInTile), uvec4(255));
		}
	}
}