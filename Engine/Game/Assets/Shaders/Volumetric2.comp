#version 460 core
#define PI 3.1415926535897932384626433832795
#extension GL_ARB_bindless_texture : require

uniform layout(binding = 0, rgba32f) restrict image2D outInScattering;

//layout(std140, binding = 1) uniform DirLight
//{
//	vec3 dirDir;
//	vec4 dirCol; //w is the intensity (0-5)
//};
//struct PointLight
//{
//	vec4 pos; //w is the radius
//	vec4 col;//a is intensity
//};
//readonly layout(std430, binding = 0) buffer PointLights
//{
//	uint numPLights;
//	PointLight pLights[];
//};
//layout(binding = 2) uniform usamplerBuffer pointLightList;
struct SpotLight
{
	vec4 pos; //w intensity
	vec4 aimD;//w cos inner angle
	vec4 col; //w cos outer angle
	float radius;
	int shadowIndex;
};
readonly layout(std430, binding = 1) buffer SpotLights
{
	uint numSLights;
	SpotLight sLights[];
};
layout(binding = 3) uniform usamplerBuffer spotLightList;

struct Shadow
{
	mat4 viewProjMatrix;
	sampler2D shadowMap;
	float bias;
};

readonly layout(std430, binding = 4) buffer SpotLightShadows
{
	Shadow shadows[];
};


layout(std140, binding = 0) uniform CameraMatrices
{
	mat4 view;
	mat4 proj;
	mat4 invView;
};
layout(binding = 0) uniform sampler2D depthTex;
layout(binding = 1) uniform sampler2D noiseTexture;

layout(location = 0) uniform float baseExtCoeff;
layout(location = 1) uniform float currTime;
layout(location = 2) uniform float noiseAmount;
layout(location = 3) uniform float fogIntensity;
layout(location = 4) uniform float anisotropy;

layout(location = 5) uniform uint lightListSize;
layout(location = 6) uniform uvec2 numTiles;
layout(location = 7) uniform uvec2 tileSize;

layout(location = 8) uniform float stepSize;
layout(location = 9) uniform uint maxSteps;
layout(location= 10) uniform uint screenDiv;

float GetLinearZ(float inputDepth)
{
	return -proj[3][2] / (proj[2][2] + (inputDepth * 2.0 - 1.0));
}

vec3 GetWorldPos(float depth, vec2 uvs)
{
	float viewZ = GetLinearZ(depth);
	float viewX = (-viewZ * (uvs.x * 2.0 - 1.0)) / proj[0][0];
	float viewY = (-viewZ * (uvs.y * 2.0 - 1.0)) / proj[1][1];
	return (invView * vec4(vec3(viewX, viewY, viewZ), 1.0)).xyz;
}

float noise(in vec3 position,in float time)
{
	return texture(noiseTexture, position.xy * vec2(position.z+time)).x;
}

float CalculateExtinctionCoeff(in vec3 currPos)
{	
	return baseExtCoeff * noise(currPos, currTime) * noiseAmount;
}

float MieScattering(vec3 V, vec3 lDir)
{
	//Henyey-Greenstein Schlick aproximation
	float k = 1.55*anisotropy - 0.55*anisotropy*anisotropy*anisotropy;
	float toSquareTerm = 1+k*dot(-V,lDir);
	return (1.0 - k*k) / (4*PI*toSquareTerm*toSquareTerm);
}

vec3 CalculateInScattering(in vec3 currPos, in vec3 cameraPos)
{
	//light * visibility * phase function
	//Irradiance on that point from all lights
	//vec3 Li = lInt * lAtt * lCol.rgb;

	vec3 vDir = normalize(cameraPos - currPos);
	vec3 li = vec3(0.0f);

	//diractional light
	//li +=  dirCol.rgb * dirCol.w * MieScattering(vDir, dirDir);

	const uvec2 currTile = uvec2(gl_GlobalInvocationID.xy * screenDiv) / tileSize;
	const uint tileIdx = currTile.y * numTiles.x + currTile.x;
	//point lights
	//int idx = texelFetch(pointLightList, int(tileIdx * lightListSize)).x;
	//for(int i = 0; i < lightListSize && idx != -1; idx = texelFetch(pointLightList, int(tileIdx * lightListSize + i)).x)
	//{
	//	PointLight pLight = pLights[idx];
	//	vec3 mVector = currPos - pLight.pos.xyz;
	//	float dist = length(mVector);
	//	vec3 pDir = normalize(mVector);
	//	float lAtt = pow(max(1 - pow(dist/ pLight.pos.w,4), 0.0),2) / (dist*dist + 1);
	//	li += pLight.col.rgb * pLight.col.w * lAtt * MieScattering(vDir, pDir);
	//	++i;
	//}

	//spot lights
	uint idx = texelFetch(spotLightList, int(tileIdx * lightListSize)).x;
	for (uint i = 0; i < lightListSize && idx != 255; idx = texelFetch(spotLightList, int(tileIdx * lightListSize + i)).x)
	//for (uint i = 0; i < numSLights; ++i)
	{
		SpotLight sLight = sLights[idx];
		//Shadows
		bool inShadow = false;
		if (sLight.shadowIndex >= 0)
		{
			Shadow shadow = shadows[sLight.shadowIndex];
			vec4 lightClipSpace = shadow.viewProjMatrix * vec4(currPos, 1.0f);
			vec3 lightNDC = lightClipSpace.xyz / lightClipSpace.w;
			lightNDC.xyz = lightNDC.xyz * 0.5f + 0.5f;
			float shadowDepth = texture(shadow.shadowMap, lightNDC.xy).r + shadow.bias;
	
			if(!(lightNDC.x >= 0.0f && lightNDC.x <= 1.0f &&
				lightNDC.y >= 0.0f && lightNDC.y <= 1.0f &&
				lightNDC.z < shadowDepth))
				{
					inShadow = true;
				}
		}
		if(!inShadow)
		{
			vec3 mVector = currPos - sLight.pos.xyz;
			vec3 sDir = normalize(mVector);
			vec3 aimDir = normalize(sLight.aimD.xyz);
			float dist = dot(mVector, aimDir);
			float r = sLight.radius;
			float att = pow(max(1 - pow(dist / r, 4), 0), 2) / (dist * dist + 1);
			float c = dot(sDir, aimDir);
			float cInner = sLight.aimD.w;
			float cOuter = sLight.col.w;
			float cAtt = clamp((c - cOuter) / (cInner - cOuter), 0.0, 1.0);
			att *= cAtt;
			li += sLight.col.rgb * sLight.pos.w * att * MieScattering(vDir, sDir);
		}
		++i;
	}

	return li;
}

float sampleIGN(vec2 pixelXY, float frameTime)
{
	pixelXY += (frameTime * 5.588238f );
	return fract(52.9829189f * fract(0.06711056f*float(pixelXY.x) + 0.00583715f*float(pixelXY.y)));
}


bool IntersectPlane(in vec3 pP, in vec3 pN, in vec3 rO, in vec3 rDir, out float t)
{
	float denom = dot(pN, rDir);
	if(denom > 1e-6f)
	{
		vec3 pPO = pP - rO;
		t = dot(pPO, pN) / denom;
		return t >= 0.0f;
	}
	return false;
}

bool IntersectDisk(in vec3 dC, in vec3 dN, float dRadius2, in vec3 rO, in vec3 rDir, out float t)
{
	if(IntersectPlane(dC, dN, rO, rDir, t))
	{
		vec3 p = rO + t*rDir;
		vec3 v = p - dC;
		float dSquared = dot(v,v);
		return dSquared <= dRadius2;
	}
	return false;
}

uint IntersectCone(in vec3 cPos, in vec3 cDir, in float cCos, in float cLength, in vec3 rO, in vec3 rDir, out float t0, out float t1)
{
	uint ret = 0;
	float dotDV = dot(rDir, cDir);
	vec3 CO = rO - cPos;
	float dotCOV = dot(CO, cDir);
	float cCos2 = cCos * cCos;
	float a = dotDV * dotDV - cCos2;
	float b = 2*( dotDV*dotCOV - dot(rDir, CO) * cCos2 );
	float c = dotCOV * dotCOV - dot(CO, CO) * cCos2;
	float det = b*b - 4*a*c;
	if(det > 0)
	{
		float detSqrt = sqrt(det);
		float tmp = (-b-detSqrt) / (2*a);
		vec3 p = rO + tmp*rDir;
		float tmp2 = dot(p - cPos, cDir);
		if(tmp2 > 0.0f && tmp2 < cLength)
		{
			t0 = tmp;
			++ret;
		}
		tmp = (-b + detSqrt) / (2*a);
		p = rO + tmp*rDir;
		tmp2 = dot(p - cPos, cDir);
		if(tmp2 > 0.0f && tmp2 < cLength)
		{
			if(tmp < t0)
			{
				t1 = t0;
				t0 = tmp;
			}
			else
				t1 = tmp;
			++ret;
		}
	}
	else if(det == 0)
	{
		t0 = -b / (2*a);
		vec3 p = rO + t0*rDir;
		float tmp2 = dot(p - cPos, cDir);
		if(tmp2 > 0.0f && tmp2 < cLength)
			++ret;
	}
	return ret;
}

bool IntersectLightShapes(in vec3 rO, in vec3 rDir, inout float t0, inout float t1)
{
	bool ret = false;
	bool insideLight = false;
	const uvec2 currTile = uvec2(gl_GlobalInvocationID.xy * screenDiv) / tileSize;
	const uint tileIdx = currTile.y * numTiles.x + currTile.x;
	//Point Lights
	//uint idx = texelFetch(pointLightList, int(tileIdx * lightListSize)).x;
	//for(uint i = 0; i < lightListSize && idx != 255; idx = (texelFetch(pointLightList, int(tileIdx * lightListSize + i))).x)
	//{
	//	vec4 pLight = pLights[idx].pos;
	//	vec3 L = pLight.xyz - rO;
	//	float tca = dot(L, rDir);
	//	float r2 = pLight.w * pLight.w;
	//	float d2 =  dot(L, L) - tca * tca;
	//	if(d2 > r2)
	//		break;
	//	float thc = sqrt(r2 - d2);
	//	float tmp = tca - thc;
	//	if(tmp < t0)
	//		t0 = tmp;
	//	tmp = tca + thc;
	//	if(tmp > t1)
	//		if(tmp > t0)
	//			t1 = tmp;
	//		else
	//			t0 = tmp;
	//	ret = true;
	//	++i;
	//}

	uint idx = texelFetch(spotLightList, int(tileIdx * lightListSize)).x;
	for (uint i = 0; i < lightListSize && idx != 255; idx = texelFetch(spotLightList, int(tileIdx * lightListSize + i)).x)
	{
		SpotLight sLight = sLights[idx];
		float tt0 = 0.0f;
		float tt1 = 0.0f;
		vec3 lDir = normalize(sLight.aimD.xyz);
		uint cIntersections = IntersectCone(sLight.pos.xyz, lDir, sLight.col.w, sLight.radius, rO, rDir, tt0, tt1);
		if(cIntersections >= 1)
		{
			t0 = min(t0, tt0);
			t1 = max(t1, tt0);

			if(cIntersections == 2)
			{
				t0 = min(t0, tt1);
				t1 = max(t1, tt1);
			}
		}
		float h = sLight.radius / sLight.col.w;
		float dRadius2 = h*h - sLight.radius * sLight.radius;
		if(IntersectDisk(sLight.pos.xyz + lDir * sLight.radius, lDir, dRadius2, rO, rDir, tt0) ||
		IntersectDisk(sLight.pos.xyz + lDir * sLight.radius, -lDir, dRadius2, rO, rDir, tt0))
		{
			t0 = min(t0, tt0);
			t1 = max(t1, tt0);
			++cIntersections;
		}
		if(cIntersections > 0 && !ret)
			ret = true;
		if(cIntersections == 1)
			insideLight = true;
		++i;
	}

	if(insideLight)
		t0 = 0.0f;

	return ret;
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	const ivec2 texSize = imageSize(outInScattering);
	if(gl_GlobalInvocationID.x < texSize.x && gl_GlobalInvocationID.y < texSize.y)
	{
		const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(texSize);
		const vec3 worldPos = GetWorldPos(texture(depthTex, uv).r, uv);
		const vec3 cameraPos = vec3(invView[3][0], invView[3][1], invView[3][2]);

		vec3 rayDir = worldPos - cameraPos;
		float maxDist = length(rayDir);
		rayDir /= maxDist;
		float t0 = maxDist;
		float t1 = 0.0f;
		
		if(IntersectLightShapes(cameraPos, rayDir, t0, t1))
		{
			t0 = max(t0, 0.0);
			t1 = min(t1, maxDist);
		
			float nSteps = ceil((t1 - t0)/stepSize); //Uniform constant de stepSize
			vec3 marchingStep = rayDir*stepSize;
			vec3 currPos = cameraPos + rayDir*t0 + marchingStep * sampleIGN(gl_GlobalInvocationID.xy, currTime);
		
			//float extCoeff = 0.0;
			vec3 accInScattering = vec3(0.0);
			for(int i = 0; i < nSteps; ++i)
			{
				//extCoeff += CalculateExtinctionCoeff(currPos)*stepSize;
				accInScattering += (CalculateInScattering(currPos, cameraPos)*stepSize);//*exp(-extCoeff);
				currPos += marchingStep;
			}
			imageStore(outInScattering, ivec2(gl_GlobalInvocationID.xy), vec4(accInScattering * fogIntensity, 1.0f));//exp(-extCoeff)*fogIntensity));
		}
		else
			imageStore(outInScattering, ivec2(gl_GlobalInvocationID.xy), vec4(0.0f));

		//vec3 rayDir = worldPos - cameraPos;
		////vec3 currentPos = cameraPos;
		//vec3 marchingStep = rayDir/float(maxSteps);
		//vec3 currentPos = cameraPos + marchingStep*sampleIGN(gl_GlobalInvocationID.xy, currTime);
		//float stepSize = length(marchingStep);
		//float extCoeff = 0.0;
		//vec3 accInScattering = vec3(0.0);
		//for(int i=0; i < maxSteps; ++i) 
		//{
		//	extCoeff += CalculateExtinctionCoeff(currentPos)*stepSize;
		//	vec3 inScattering = CalculateInScattering(currentPos, cameraPos)*stepSize;
		//	accInScattering += inScattering*exp(-extCoeff);
		//	currentPos += marchingStep;
		//}
		//imageStore(outInScattering, ivec2(gl_GlobalInvocationID.xy), vec4(accInScattering * fogIntensity, exp(-extCoeff)*fogIntensity));
	}
}